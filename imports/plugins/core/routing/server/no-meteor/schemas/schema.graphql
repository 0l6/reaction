"Definition of a routing redirect rule"
type RedirectRule implements Node {
  "The rule ID"
  _id: ID!

  "Whether the rule in enabled"
  enabled: Boolean!

  "Path to redirect from"
  from: String!

  "Status code of the redirect"
  status: Int!

  "Path to redirect to"
  to: String!

  "Type of redirect"
  type: RedirectType!
}

enum RedirectType {
  "Visibly redirect a route"
  redirect

  "Silently redirect a route"
  rewrite
}

input AddRedirectRuleInput {
  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "Whether the rule in enabled"
  enabled: Boolean!

  "Path to redirect from"
  from: String!

  "Status code of the redirect"
  status: Int!

  "Path to redirect to"
  to: String!

  "Type of redirect"
  type: RedirectType!
}

type AddRedirectRulePayload {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "The newly-created redirect rule"
  redirectRule: RedirectRule!
}

input RemoveRedirectRuleInput {
  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "ID of rule to delete"
  id: ID!
}

type RemoveRedirectRulePayload {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "Whether the rule was successfully removed"
  wasRemoved: Boolean!
}

input UpdateRedirectRuleInput {
  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "ID of rule to modify"
  id: ID!

  "Whether the rule in enabled"
  enabled: Boolean!

  "Path to redirect from"
  from: String!

  "Status code of the redirect"
  status: Int!

  "Path to redirect to"
  to: String!

  "Type of redirect"
  type: RedirectType!
}

type UpdateRedirectRulePayload {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "The newly-created redirect rule"
  redirectRule: RedirectRule!
}

extend type Query {
  "Returns a list of rules matching specified query"
  redirectRules(
    id: ID
    from: String
    to: String
    type: RedirectType
    status: Int
    enabled: Boolean
  ): [RedirectRule]!
}

extend type Mutation {
  "Adds a new redirect rule"
  addRedirectRule(input: AddRedirectRuleInput!): AddRedirectRulePayload!

  "Removes an existing redirect rule"
  removeRedirectRule(input: RemoveRedirectRuleInput!): RemoveRedirectRulePayload!

  "Updates an existing redirect rule"
  updateRedirectRule(input: UpdateRedirectRuleInput!): UpdateRedirectRulePayload!
}
