# Payment Schema

# TODO: Is this used because it doesn't have a second currency?
# Does it come from the store's base currency?
# And everything's optional?
# From which exchange is the rate taken? And when was it taken? These should be
# logged.
type CurrencyExchangeRate {
  exchangeRate: Float
  userCurrency: String
}

input CurrencyExchangeRateInput {
  exchangeRate: Float
  userCurrency: String
}

input PaymentInput {
  address: Address
  currencyExchangeRate: CurrencyExchangeRateInput # TODO: Should this be an input?
  invoice: InvoiceInput
  paymentMethod: JSONObject # TODO: JSONObject :`( But there is a schema for this!
  shop: Shop
}

type Payment implements Node {
  _id: ID!
  address: Address
  currencyExchangeRate: CurrencyExchangeRate
  invoice: Invoice
  paymentMethod: JSONObject
  shop: Shop
}

type Invoice implements Node {
  discounts: Float
  shipping: Float
  subtotal: Float!
  taxes: Float
  total: Float!
  transaction: String
}

enum PaymentMethodEnum {
  credit
  debit
  shipping-credit
}

enum PaymentMethodModeEnum {
  authorize
  capture
  refund
  cancel
  void
}

PaymentMethodRiskLevelEnum {
  normal
  elevated
  high
}

type PaymentMethod implements Node {
  processor: String!
  paymentPackageId: String!
  paymentSettingsKey: String!
  storedCard: String
  method: PaymentMethodEnum
  transactionId: String!
  metadata: [Metadata]
  workflow: Workflow
  status: String
  mode: PaymentMethodModeEnum
  riskLevel: PaymentLevelRiskLevelEnum
  createdAt: DateTime!
  updatedAt: DateTime!
  authorization: String
  amount: Float
  currency: Currency
  transactions: [JSONObject]
  item: [PaymentItem]  # TODO: Is this defined?
  shop: Shop
}
